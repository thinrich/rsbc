Since both Plato JS and Client Side Validations JS rely on knowing the names of the input fields we have a problem: 
	<%= f.input :day, as: "day" %> # puts out <input type="text" name="day" /> vs <input type="text" name="birthdate[day]" />

	Plato takes the names of the symbols :day, :month, :year and uses that as to what to look for in the DOM. We could edit the cellvalue() function to do $('input[name=birthdate[day]]').

	On the other side, Client side validation, I assume, expects the names to be birthdate[year|day|month] and so its jquery plugin relies on that. However, there may be a way to override this. I haven't checked for sure yet, though.


Sanitizers maybe created as hooks using the `before_*` hooks available:

before_validation
after_validation
before_save
around_save
before_create
around_create
after_create
after_save

We could tell developers that they need to use these types of hooks to do any sort of pre-validation messing with of data.

====== Jun  14 ========

o Racc::ParseError: 
  parse error on value ":" (tCOLON)

- (mike) I get this error when I try to do a .to_ast on any method found within the Birthdate model in the rails console. I'm not sure if this is specific to me or you guys are having the same issue. I don't think I got this error in previous versions of the repository.

- add gem 'live_ast_ripper' to Gem file
- add require 'live_ast_ripper' near the top of config/application.rb 
- the problem is that Ruby2Ruby doesn't support Ruby 1.9 hashes of the form { key: 'value' }, only supports old-style { :key => 'value' }
